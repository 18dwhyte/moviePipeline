name: Frontend Continuous Deployment

on:
  push:
    branches: [master]
    paths:
      - 'starter/frontend/**'
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: starter/frontend
    steps:
      - uses: actions/checkout@v4
      - run: npm ci
      - run: npm test

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build Docker image
        run: |
          docker build -t frontend-app:${{ github.sha }} ./starter/frontend
          echo "IMAGE_TAG=${{ github.sha }}" >> $GITHUB_ENV

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: production
    defaults:
      run:
        working-directory: starter/frontend
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1


      #There should be a step that builds the application using docker only after linting and testing complete (use the needs directive) 
      #This step should also utilize build-args to ensure the application is built with an environment variable REACT_APP_MOVIE_API_URL
      - name: Build Docker image
        run: docker build -t frontend --build-arg=REACT_APP_MOVIE_API_URL=${{ vars.REACT_APP_MOVIE_API_URL }} .

      #There should be a step that utilizes aws-actions/amazon-ecr-login action for logging into ECR.
      #(using 3rd party actions) The ECR login step should also be accessing Github Secrets for credentials. (secure approach)
      - name: ECR Login
        uses: aws-actions/amazon-ecr-login@v1
        with:
          access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          region: ${{ vars.AWS_DEFAULT_REGION }}
        
      - name: Tag Docker Image
        run: docker tag frontend:latest ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/frontend:${GITHUB_SHA::7}

      #There should be a step that pushes the docker image to ECR in the AWS account. 
      - name: Push Docker image to ECR
        run: docker push ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/frontend:${GITHUB_SHA::7}

      - name: Kubeconfig Login
        run: aws eks update-kubeconfig --name cluster --region ${{ vars.AWS_DEFAULT_REGION }}

      #There should be a step that deploys the application using kubectl to the eks cluster
      - name: Deploy to Kubernetes
        run: |
          cd ./starter/frontend/k8s
          kustomize edit set image frontend=${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/frontend:${GITHUB_SHA::7}
          kustomize build | kubectl apply -f -

