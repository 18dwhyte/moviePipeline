name: Frontend Continuous Deployment

on:
  push:
  #master is the main branch
    branches: [master]
    paths:
      - 'starter/frontend/**'
  workflow_dispatch:

jobs:
#LINT JOB: There should be a job in the workflow that runs linting. 
  lint:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: starter/frontend
    steps:
    #Checkout code
      - name: Checkout 
        uses: actions/checkout@v4 
    #Setup NodeJS
      - name: Node 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: ./starter/frontend/package-lock.json
      #Perform a cache action to restore cache before dependency install
      - name: Perform a cache action to restore cache before dependency install
        uses: actions/cache@v3
        id: npm-cache
        with:
          path: |
            starter/frontend/node_modules
            starter/frontend/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('starter/frontend/package-lock.json') }}
        #Install dependencies
      - name: Install dependencies
        run: npm install
        #Run the npm run lint command
      - name: Run ESLint
        run: npm run lint
#There should be a step in the workflow that runs the tests and passes
  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: starter/frontend
    steps:
    #Checkout code
      - name: Checkout
        uses: actions/checkout@v4 
         #Setup NodeJS
      - name: Node 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: ./starter/frontend/package-lock.json
          #Perform a cache action to restore cache before dependency install
      - name: Perform a cache action to restore cache before dependency install
        uses: actions/cache@v3
        id: npm-cache
        with:
          path: |
            starter/frontend/node_modules
            starter/frontend/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('starter/frontend/package-lock.json') }}
          #Install dependencies
      - name: Install dependencies
        run: npm install
        #Run the npm run lint command
      - name: Run Test
        run: npm run test

  build:
    needs: [lint, test] 
    runs-on: ubuntu-latest
    environment: udacity
    defaults:
      run:
        working-directory: starter/frontend
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      #There should be a step that builds the application using docker only after linting and testing complete (use the needs directive) 
      #This step should also utilize build-args to ensure the application is built with an environment variable REACT_APP_MOVIE_API_URL
      - name: Build Docker image
        run: docker build -t frontend --build-arg=REACT_APP_MOVIE_API_URL=${{ vars.REACT_APP_MOVIE_API_URL }} .

      #There should be a step that utilizes aws-actions/amazon-ecr-login action for logging into ECR.
      #(using 3rd party actions) The ECR login step should also be accessing Github Secrets for credentials. (secure approach)
      - name: ECR Login
        uses: aws-actions/amazon-ecr-login@v2
        with:
          access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          region: ${{ vars.AWS_DEFAULT_REGION }}
        
      - name: Tag Docker Image
        run: docker tag frontend:latest ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/frontend:${GITHUB_SHA::7}

      #There should be a step that pushes the docker image to ECR in the AWS account. 
      - name: Push Docker image to ECR
        run: docker push ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/frontend:${GITHUB_SHA::7}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: udacity
    defaults:
      run:
        working-directory: starter/frontend
    steps:
      - uses: actions/checkout@v4
      - name: AWS Login
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name cluster --region ${{ vars.AWS_DEFAULT_REGION }}

      #There should be a step that deploys the application using kubectl to the eks cluster
      - name: Deploy to Kubernetes
        run: |
          kustomize edit set image frontend=${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/frontend:${GITHUB_SHA::7}
          kustomize build | kubectl apply -f -
        working-directory: starter/frontend/k8s