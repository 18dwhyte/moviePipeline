name: Backend Continuous Deployment

on:
  push:
    branches: [master]
    paths:
      - 'starter/backend/**'
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: starter/backend
    steps:
      - uses: actions/checkout@v4
      - name: Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install uwsgi
          pip install flask-cors
          pip install pytest
          pip install flask
          pip install Flake8
      - name: Linter
        run: flake8 .

  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: starter/backend
    steps:
      - uses: actions/checkout@v4
      - name: Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install uwsgi
          pip install flask-cors
          pip install pytest
          pip install flask
      - name: Run tests
        run: |
          pytest .

  build:
    needs: [lint, test]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: starter/backend
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_DEFAULT_REGION }}

      - name: ECR Login
        uses: aws-actions/amazon-ecr-login@v2
        with:
          access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_DEFAULT_REGION }}

      - name: Build Docker image
        run: docker build -t backend .

      - name: Tag Docker Image
        run: docker tag backend:latest ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/backend:${GITHUB_SHA::7}

      - name: Push Docker image to ECR
        run: docker push ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/backend:${GITHUB_SHA::7}

      - name: Kubeconfig Login
        run: |
          aws eks update-kubeconfig --name cluster --region ${{ vars.AWS_DEFAULT_REGION }}
          kubectl config current-context
          kubectl get nodes

      - name: Deploy to Kubernetes
        id: deploy-k8s
        run: |
          cd ./starter/backend/k8s
          kustomize edit set image backend=${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/backend:${GITHUB_SHA::7}
          kustomize build | kubectl apply -f -

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Replace image tag in Kubernetes manifests
        run: |
          sed -i "s|IMAGE_TAG|${{ env.IMAGE_TAG }}|g" k8s/backend-deployment.yaml

      - name: Deploy to Kubernetes
        run: kubectl apply -f k8s/
